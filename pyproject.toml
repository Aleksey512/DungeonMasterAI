[project]
name = "dungeonmasterai"
version = "0.1.0"
description = ""
authors = [
    {name = "Aleksey Yakunin \"yakunina1111@gmail.com\""}
]
license = {text = "LICENSE"}
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pydantic (>=2.11.7,<3.0.0)"
]


[tool.mypy]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_return_any = false
warn_unused_ignores = false

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.ruff]
# List of enabled rulsets.
# See https://docs.astral.sh/ruff/rules/ for more information.
lint.select = [
    "E",   # Error
    "F",   # Pyflakes
    "W",   # Pycodestyle
    "C90", # McCabe complexity
    "I",   # Isort
    "N",   # pep8-naming
    "ANN", # Pytype annotations
    "S",   # Bandit
    "B",   # Bugbear
    "COM", # Commas
    "C4",  # Comprehensions
    "ISC", # Implicit string concat
    "PIE", # Unnecessary code
    "T20", # Catch prints
    "PYI", # validate pyi files
    "Q",   # Checks for quotes
    "RSE", # Checks raise statements
    "RET", # Checks return statements
    "SLF", # Self checks
    "SIM", # Simplificator
    "PTH", # Pathlib checks
    "ERA", # Checks for commented out code
    "PL",  # PyLint checks
    "RUF", # Specific to Ruff checks
]
lint.ignore = [
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "D212",    # Multi-line docstring summary should start at the first line
    "D401",    # First line should be in imperative mood
    "D104",    # Missing docstring in public package
    "D100",    # Missing docstring in public module
    "ANN401",  # typing.Any are disallowed in `**kwargs
    "PLR0913", # Too many arguments for function call
    "D106",    # Missing docstring in public nested class
]
exclude = [".venv/"]
lint.mccabe = { max-complexity = 10 }
line-length = 88

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",   # Use of assert detected
    "S301",   # Use of pickle detected
    "D103",   # Missing docstring in public function
    "SLF001", # Private member accessed
    "S311",   # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "D101",   # Missing docstring in public class
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["int", "str", "float"]

[tool.pytest.ini_options]
log_level = 'INFO'


[tool.poetry.group.dev.dependencies]
mypy = "^1.16.1"
isort = "^6.0.1"
ruff = "^0.12.0"
pytest = "^8.4.1"
black = "^25.1.0"
pre-commit = "^4.2.0"
coverage = "^7.9.1"
pytest-cov = "^6.2.1"
mock = "^5.2.0"
pytest-mock = "^3.14.1"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
